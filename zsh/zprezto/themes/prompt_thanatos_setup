#!/usr/bin/env zsh
#
# From Garrett Zsh Theme for Prezto
#

pmodload 'helper'

#
# PROMPT | prompt_thanatos_help
#     - prompt configuration help
# TODO not even remotely finished...
#

pyevent_shell=''

function prompt_thanatos_pwd
{
    # Tell prezto we can manage this prompt
    zstyle ':prezto:module:prompt' managed 'yes'

	local pwd="${PWD/#$HOME/~}"

	if [[ "$pwd" == (#m)[/~] ]]
	then # pwd will fit
		prompt_thanatos_current_dir="${prompt_thanatos_color_pwd}$MATCH"
		unset MATCH
	else # pwd needs truncation
		prompt_thanatos_current_dir="${prompt_thanatos_color_pwd}%F{15}%~%f% "
	fi
}

function prompt_pyenv_shell
{
    pyevent_shell=${VIRTUAL_ENV:t}
}

#
# Notifications
#     - notify of command completion after n seconds has passed
#

function prompt_thanatos_precmd_notification
{
	# trigger a notification after n seconds have elapsed
	prompt_thanatos_delay_after_notification=1

	# determine time elapsed
	prompt_thanatos_precmd_time_elapsed_start=${prompt_thanatos_preexec_time:-$(date +'%s')}
	prompt_thanatos_precmd_time_elapsed_stop=$(date +'%s')
	let prompt_thanatos_precmd_time_elapsed=$prompt_thanatos_precmd_time_elapsed_stop-$prompt_thanatos_precmd_time_elapsed_start

	# notify!
	if [ $prompt_thanatos_precmd_time_elapsed -gt $prompt_thanatos_delay_after_notification ]
	then # n seconds have passed, so notify!
		if [[ "$OSTYPE" == darwin* ]] && (( $+commands[terminal-notifier] ))
		then
			terminal-notifier -title "${prompt_thanatos_preexec_cmd:-Unknown command}" -message "Required $prompt_thanatos_precmd_time_elapsed s" -sound Tink
		elif [[ "$OSTYPE" == darwin* ]] && (( $+commands[growlnotify] ))
		then
			growlnotify -n "Terminal" -t "${prompt_thanatos_preexec_cmd:-Unknown command}" -m "Required $prompt_thanatos_precmd_time_elapsed s"
		else
			tput bel
		fi
	fi
}

#
# PROMPT | prompt_thanatos_chpwd
#    - a function which is executed whenever the directory is changed
#

function prompt_thanatos_chpwd
{
	# list the contents of the new directory
	if is-callable 'dircolors';
	then # GNU flavor ls
		if zstyle -t ':prezto:module:utility:ls' color
		then
			ls --group-directories-first --color=auto
		else
			ls -F
		fi
	else # BSD flavor ls
		if zstyle -t ':prezto:module:utility:ls' color
		then
			ls -G
		else
			ls -F
		fi
	fi
}

#
# PROMPT | prompt_thanatos_preexec
#     - functions that are called before command execution
#

function prompt_thanatos_preexec
{
	# Define timer and cmd for notification
	export prompt_thanatos_preexec_time=$(date +'%s')
	export prompt_thanatos_preexec_cmd="\$ $1"

	# Ensure terminal code isn't colored from prompt
	print -n "$reset_color"
}

#
# PROMPT | prompt_thanatos_precmd
#     - functions that are called before each prompt is displayed
#

function prompt_thanatos_precmd
{
	setopt LOCAL_OPTIONS
	unsetopt XTRACE KSH_ARRAYS

	# Show number of background jobs
	prompt_thanatos_number_jobs="%(1j.${prompt_thanatos_color_prompt}J:${cyan}%j .)"

	# Format PWD
	prompt_thanatos_pwd

	# Trigger a notification after x time has elapsed
	eval prompt_thanatos_precmd_notification

	# Get ruby info
    if (( $+functions[ruby-info] ))
	then
		ruby-info
	fi

	# Get git repository info
	if (( $+functions[git-info] ))
	then
		git-info
	fi

	#
	# Add a line to prompt for visibility
	#

	# Determine the width
	local prompt_thanatos_width_terminal
	(( prompt_thanatos_width_terminal= ${COLUMNS} - 1 ))

	# Determine the length needed for prompt_thanatos_space
	# NOTE: Be sure not to include the ${(e)prompt_thanatos_space} portion or it won't work
	local prompt_line1="${prompt_thanatos_upper_left_corner}(${prompt_thanatos_current_dir}${git_info[remote_status]}${git_info[prompt_info]}${git_info[local_status]})(${ruby_info[version]}${porompr_thanatos_location})"
		local prompr_thanatos_location='${prompt_thanatos_user}${cyan}@${prompt_thanatos_host}' # user@host.name
	local zero='%([BSUbfksu]|([FB]|){*})'
	local prompt_thanatos_width_line1=${#${(S%%)prompt_line1//$~zero/}}

	# Calculate the padding
	local prompt_thanatos_space_padding
	(( prompt_thanatos_space_padding= ${prompt_thanatos_width_terminal} - ${prompt_thanatos_width_line1} ))

	# Add the correct number of characters
	local prompt_space_character="${prompt_thanatos_altchar_padding}"
	eval prompt_thanatos_space="${prompt_thanatos_color_prompt}\${(l.${prompt_thanatos_space_padding}..${prompt_space_character}.)}"

	# Prompt line 1
	print
	print -P '${prompt_thanatos_altchar_enable}${prompt_thanatos_color_prompt}${prompt_thanatos_upper_left_corner}(${ruby_info[version]}${prompt_thanatos_location}${prompt_thanatos_current_dir}${prompt_thanatos_color_prompt})${prompt_thanatos_altchar_enter}${(e)prompt_thanatos_space}${prompt_thanatos_altchar_leave}(${git_info[remote_status]}${git_info[prompt_info]}${git_info[local_status]}${prompt_thanatos_color_prompt})'
}

#
# PROMPT | prompt_thanatos_setup
#    - finally, configure the prompt
#

function prompt_thanatos_setup
{
	# Load necessary modules
	setopt LOCAL_OPTIONS
	unsetopt XTRACE KSH_ARRAYS
	prompt_opts=(cr percent subst)

	# Add hooks for calling preexec, precmd & chpwd
	autoload -Uz add-zsh-hook
	add-zsh-hook preexec prompt_thanatos_preexec
	add-zsh-hook precmd prompt_thanatos_precmd
	#add-zsh-hook chpwd prompt_thanatos_chpwd
	add-zsh-hook precmd prompt_pyenv_shell

	#
	# Colors
	#

	# Alias the colors
	[[ -z $(functions colors) ]] && autoload -U colors && colors

	for color in black red green yellow blue magenta cyan white grey
	do
		eval $color='%F{${(L)color}}'
		eval ${color}_bold='%B{${(L)color}}'
	done

	# Color scheme
	eval prompt_thanatos_color_pwd=\$\{${2:-'${blue}'}\}
	# eval prompt_thanatos_color_pwd=${2:-'${blue}'}
	eval prompt_thanatos_color_line_number=${5:-'${magenta}'}
	eval prompt_thanatos_color_time=${6:-'${green}'}
	eval prompt_thanatos_color_git_branch=${7:-'${green}'}
	eval prompt_thanatos_color_git_sha=${8:-'${yellow}'}
	eval prompt_thanatos_color_ruby_version=${8:-'${yellow}'}

	# Determine prompt, user and host colors
	if [[ "$EUID" = "0" ]] || [[ "$USER" = 'root' ]]
	then # root user

		# set colors
		eval prompt_thanatos_color_user=${3:-'${red}'}
		eval prompt_thanatos_color_host=${3:-'${red}'}
		eval prompt_thanatos_color_prompt=${3:-'${red}'}

		# set style
		eval prompt_thanatos_user='%S${prompt_thanatos_color_user}%n%s'
		eval prompt_thanatos_host='${prompt_thanatos_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
		#eval porompr_thanatos_location='${prompt_thanatos_user}${cyan}@${prompt_thanatos_host}' # user@host.name
		eval prompt_thanatos_location='' # user@host.name

	elif [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]
	then # on SSH

		# set colors
		eval prompt_thanatos_color_user=${3:-'${green}'}
		eval prompt_thanatos_color_host=${3:-'${yellow}'}
		eval prompt_thanatos_color_prompt=${3:-'${yellow}'}

		# set style
		eval prompt_thanatos_user='%S${prompt_thanatos_color_user}%n%s'
		eval prompt_thanatos_host='${prompt_thanatos_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
		#eval prompt_thanatos_location='${prompt_thanatos_user}${cyan}@${prompt_thanatos_host}' # user@host.name
		eval prompt_thanatos_location='' # user@host.name

	else # normal user

		# set colors
		eval prompt_thanatos_color_user=${1:-'${blue}'}
		eval prompt_thanatos_color_host=${1:-'${blue}'}
		eval prompt_thanatos_color_prompt=${1:-'${white}'}

		# set style
		eval prompt_thanatos_user=''
		eval prompt_thanatos_host='${prompt_thanatos_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
		#eval prompt_thanatos_location='${prompt_thanatos_user}${cyan}@${prompt_thanatos_host}' # user@host.name
		eval prompt_thanatos_location='' # user@host.name

	fi

	#
	# Report return code
	#

	eval prompt_thanatos_return_code='%(?..${red}%?  ) '

	#
	# Report local time
	#

	eval prompt_thanatos_current_time='${green}%T'           # 24 hour time format
	# eval prompt_thanatos_current_time='${green}%*'           # 24 hour time format, second precise
	# eval prompt_thanatos_current_time='${green}%t'           # AM/PM time format

	# Keep the time updated
	# TODO: figure out a better way to do this
	# schedprompt()
	# {
		# emulate -L zsh
		# zmodload -i zsh/sched

		# # Remove existing event, so that multiple calls to "schedprompt" work OK (you could put one in precmd to push the timer 30 seconds into the future, for example.)
		# integer i=${"${(@)zsh_scheduled_events#*:*:}"[(i)schedprompt]}
		# (( i )) && sched -$i

		# # Test that zle is running before calling the widget (recommended to avoid error messages). Otherwise it updates on entry to zle, so there's no loss.
		# zle && zle reset-prompt

		# # This ensures we're not too far off the start of the minute
		# sched +1 schedprompt
	# }
	# schedprompt

	#
	# Report terminal line number
	#

	eval prompt_thanatos_line_number='${green}+${magenta}%!'

	#
	# Report git info
	# NOTE: listed in order in which the information will appear in the prompt
	#

	# Git verbose data (commit counts, etc.)
	# zstyle ':prezto:module:git:info' verbose 'yes'

	# Git prompt info
	zstyle ':prezto:module:git:info:branch'    format "${yellow}λ${prompt_thanatos_color_prompt}:${blue}%b"
	zstyle ':prezto:module:git:info:remote'    format ""
	zstyle ':prezto:module:git:info:action'    format "${yellow} %s"
	zstyle ':prezto:module:git:info:position'  format "${red} %p"

	# Git commit SHA
	zstyle ':prezto:module:git:info:commit'    format "${yellow} %.7c"

	# Git remote status
	zstyle ':prezto:module:git:info:behind'    format "${magenta}"
	zstyle ':prezto:module:git:info:ahead'     format "${magenta}"
	zstyle ':prezto:module:git:info:diverged'  format "${magenta}"
	zstyle ':prezto:module:git:info:stashed'   format "${red}"

	# Git local status
	zstyle ':prezto:module:git:info:clean'     format ""
	zstyle ':prezto:module:git:info:dirty'     format "${prompt_thanatos_color_prompt}!"
	zstyle ':prezto:module:git:info:added'     format "${green}+"
	zstyle ':prezto:module:git:info:deleted'   format "${red}x"
	zstyle ':prezto:module:git:info:modified'  format "${blue}"
	zstyle ':prezto:module:git:info:renamed'   format "${magenta}➜"
	zstyle ':prezto:module:git:info:unmerged'  format "${yellow}═"
	zstyle ':prezto:module:git:info:untracked' format "${white}"

	# Git prompt styles
	zstyle ':prezto:module:git:info:keys' format \
		'prompt_info'     "%b" \
		'rprompt'         "%R" \
		'local_status'    "%C%D%a%d%m%r%U%u" \
		'remote_status'   "%B%A%S" \
		'sha'             "%c" \

	#
	# Report ruby version
	#     %v | ruby version
	#

	zstyle ':prezto:module:ruby:info:version' format "${yellow}ruby:%v "

	#
	# Vim mode indicator
	#

	zstyle ':prezto:module:editor:info:keymap:primary'           format "%B%F${white}>%F${blue}>%F${green}>%f%b "
	zstyle ':prezto:module:editor:info:keymap:alternate'         format "%B%F${red}<%F${magenta}<%F${yellow}<%f%b "
	# zstyle ':prezto:module:editor:info:keymap:primary:insert'    format "${red}I "
	zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format "${red}♺ "
	zstyle ':prezto:module:editor:info:completing'               format "${red}..."

	#
	# Use the extended character set, if available
	#

	typeset -A altchar
	set -A altchar ${(s..)terminfo[acsc]}
	prompt_thanatos_altchar_enable="%{$terminfo[enacs]%}"
	prompt_thanatos_altchar_enter="%{$terminfo[smacs]%}"
	prompt_thanatos_altchar_leave="%{$terminfo[rmacs]%}"
	prompt_thanatos_altchar_padding=${altchar[q]:--}
	prompt_thanatos_upper_left_corner=${prompt_thanatos_altchar_enter}${altchar[l]:--}${altchar[q]:--}${prompt_thanatos_altchar_leave}
	prompt_thanatos_lower_left_corner=${prompt_thanatos_altchar_enter}${altchar[m]:--}${altchar[q]:--}${prompt_thanatos_altchar_leave}
	prompt_thanatos_upper_right_corner=${prompt_thanatos_altchar_enter}${altchar[q]:--}${altchar[k]:--}${prompt_thanatos_altchar_leave}
	prompt_thanatos_lower_right_corner=${prompt_thanatos_altchar_enter}${altchar[q]:--}${altchar[j]:--}${prompt_thanatos_altchar_leave}

	#
	# Finally!
	#
	#   PROMPT   | Left
	#   RPROMPT  | Right
	#   PROMPT2  | Continuation
	#   PROMPT3  | Selection
	#   PROMPT4  | Execution trace
	#   SPROMPT  | Autocorrection
	#   SUDO_PS1 | Backup root prompt
	#

  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

	if (( $SHLVL == 1 ))
	then
		export PROMPT='${prompt_thanatos_altchar_enable}${prompt_thanatos_color_prompt}${prompt_thanatos_lower_left_corner}[${pyevent_shell}]${editor_info[keymap]}'
	else
        export PROMPT='${prompt_thanatos_color_prompt}${prompt_thanatos_lower_left_corner}[${pyevent_shell}](${cyan}$SHLVL${prompt_thanatos_color_prompt})${editor_info[keymap]}'
	fi

	export RPROMPT='${editor_info[alternate]}${editor_info[overwrite]}${prompt_thanatos_return_code}${prompt_thanatos_number_jobs}${prompt_thanatos_current_time}%(?.${prompt_thanatos_color_prompt}.${red})'

	export PROMPT2='(%_) ${editor_info[keymap]}'

	export PROMPT3='
(?) ${editor_info[keymap]}'

	export PROMPT4='${yellow}+${blue}%N ${green}@${magenta}%i ${reset_color}'

	export SPROMPT='
${prompt_thanatos_color_prompt}Correct ${red}%R${prompt_thanatos_color_prompt} to ${green}%r${prompt_thanatos_color_prompt} ? [nyae] '

	export SUDO_PS1="\[\e[31;1;46m\][\u] \w \$\[\e[0m\] "
}

prompt_thanatos_setup "$@"
